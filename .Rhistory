load("~/GitHub/hdc-r-workshop/hdc-r-workshop.Rproj")
library(dplyr) # manipulate dataframes
library(readr) # read/write dataframes
library(tidyr) # reshaping dataframes
library(stringr) # string manipulation
library(forcats) # factor manipulation
library(DBI) #Connect with DB dataset
library(RPostgres) #Process DBI via SQL
library(getPass) #Get pass function
library(dbplyr) # manipulate DB dataframes
master <- read_csv("DATA/CHLDC_master_collapsed.csv")
master <- select(master, -X1)
#bbls of interest
bbl_list <- pull(master, bbl)
library(sf)
#via sf
?st_read
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/",layer = municipios)
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/",layer = municipios.shp)
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/municipios",layer = municipios.shp)
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/municipios",layer = municipios)
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/municipios",layer = "municipios")
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/",layer = "municipios.shp")
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/",layer = "municipios")
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/COVID_19_SSA_Mex/ssa_covid_template.geojson",layer = "municipios")
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/COVID_19_SSA_Mex/ssa_covid_template.geojson")
ggplot(data = municipios_sf) +
geom_sf()
library(ggplot2)
ggplot(data = municipios_sf) +
geom_sf()
View(municipios_sf)
View(municipios_sf)
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/municipios.shp")
ggplot(data = municipios_sf) +
geom_sf()
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/COVID_19_SSA_Mex/ssa_covid_template.geojson")
#via sf
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/municipios.shp")
#Exportados:
#C:\Users\Mariano\Documents\ArcGIS\MEX\COVID_19_SSA_Mex\EXPORTED
library(tidyverse)
library(gganimate)
library(gifski)
library(reshape2)
library(leaflet)
library(sf)
library(ggplot2)
library(dplyr)
setwd("C:/Users/Mariano/Documents/GitHub/COVID_MX_mun/")
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio[4:64] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
View(casos_covid_municipio)
View(casos_covid_municipio)
?format
?round
?sprintf
sprintf("2.2f",casos_covid_municipio$casos_acum_100) #for percentages
sprintf("%2.2f",casos_covid_municipio$casos_acum_100) #for percentages
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio[4:64] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
casos_covid_municipio$casos_acum_100 <- sprintf(casos_covid_municipio$casos_acum_100,"%2.2f")
casos_covid_municipio$casos_acum_100 <- sprintf(as.character(casos_covid_municipio$casos_acum_100,"%2.2f"))
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio[4:64] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
casos_covid_municipio$casos_acum_sh <- sprintf(as.character(casos_covid_municipio$casos_acum_100,"%2.2f"))
casos_covid_municipio$casos_acum_sh <- sprintf(as.character(casos_covid_municipio$casos_acum_100,"%2.2f %%%%"))
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio$casos_acum_tx <- as.character(casos_covid_municipio$casos_acum_100)
casos_covid_municipio$casos_acum_sh <- sprintf(casos_covid_municipio$casos_acum_tx,"%2.2f %%%%")
casos_covid_municipio$casos_acum_sh <- sprintf("%2.2f %%%%",casos_covid_municipio$casos_acum_tx)
casos_covid_municipio$casos_acum_sh <- sprintf("%2.2f",casos_covid_municipio$casos_acum_tx)
casos_covid_municipio$casos_acum_sh <- sprintf("%2.2f %%",casos_covid_municipio$casos_acum_tx)
casos_covid_municipio$casos_acum_sh <- sprintf(casos_covid_municipio$casos_acum_tx,"%2.2f %%%%")
casos_covid_municipio$casos_acum_sh
casos_covid_municipio$casos_acum_sh <- sprintf(casos_covid_municipio$casos_acum_tx,"%2.2f %%")
casos_covid_municipio$casos_acum_sh
casos_covid_municipio$casos_acum_sh <- sprintf(casos_covid_municipio$casos_acum_tx,"%2.2f")
casos_covid_municipio$casos_acum_sh
casos_covid_municipio$casos_acum_sh <- sprintf(casos_covid_municipio$casos_acum_100,"%2.2f")
casos_covid_municipio$casos_acum_sh <- as.number(sprintf(as.character(casos_covid_municipio$casos_acum_100,"%2.2f")))
casos_covid_municipio$casos_acum_sh <- as.numeric(sprintf(as.character(casos_covid_municipio$casos_acum_100,"%2.2f")))
casos_covid_municipio$casos_acum_sh <- format(casos_covid_municipio$casos_acum_100, digits=2, nsmall=2)
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio$casos_acum <- format(casos_covid_municipio$casos_acum_100, digits=2, nsmall=2)
casos_covid_municipio$casos_acum <- format(casos_covid_municipio$casos_acum_100, digits=2, nsmall=2) #acortar el numero de casos dividido por poblacion
casos_covid_municipio[4:64] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
View(casos_covid_municipio)
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio$casos_acum <- format(casos_covid_municipio$casos_acum_100, digits=2, nsmall=2) #acortar el numero de casos dividido por poblacion
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio$casos_ajustados <- format(casos_covid_municipio$casos_acum_100, digits=2, nsmall=2) #acortar el numero de casos dividido por poblacion
casos_covid_municipio[4:64] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio$casos_ajustados <- format(casos_covid_municipio$casos_acum_100, digits=2, nsmall=2) #acortar el numero de casos dividido por poblacion
casos_covid_municipio[4:64,67] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
casos_covid_municipio[4:64;67] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
casos_covid_municipio[4:64/67] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
#mutate(casos_acum_100 = (casos_acum/pop)*100000)) %>%   #ajustada por poblacion
mutate(casos_acum_100 = 100000 * (cumsum(casos_nuevos)/pop)) %>%
ungroup()
casos_covid_municipio$casos_ajustados <- format(casos_covid_municipio$casos_acum_100, digits=2, nsmall=2) #acortar el numero de casos dividido por poblacion
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
mutate(casos_acum_ajustados = 100000 * (cumsum(casos_nuevos)/pop)) %>% #ajustada por poblacion
ungroup()
casos_covid_municipio$casos_acum_ajustados <- format(casos_covid_municipio$casos_acum_ajustados, digits=2, nsmall=2) #acortar el numero de casos dividido por poblacion
casos_covid_municipio
casos_covid_municipio <- "DATA/Casos_Diarios_Municipio_Confirmados_20200628.csv" %>%
read_csv() %>%
rename( #cambiar nombres a columnas para claridad y comodidad
id = cve_ent,
pop = poblacion,
mun = nombre
) %>%
pivot_longer(
cols = matches("\\d{2}-\\d{2}-\\d{4}"), #los pivotes seran solo columnas que sean fechas
names_to = "fecha",
#names_transform = list(fecha = dmy),
values_to = "casos_nuevos"#, #alargar (mas filas) el dataset agregando un valor/una fila por cada municipio + fecha
#values_transform = list(fecha = as.integer)
) %>%
arrange(id, fecha) %>%
group_by(id) %>% #agrupar por municipio
mutate(casos_acum = cumsum(casos_nuevos)) %>% #cumsum, suma acumulada
mutate(casos_acum_ajustados = 100000 * (cumsum(casos_nuevos)/pop)) %>% #ajustada por poblacion
ungroup()
casos_covid_municipio$casos_acum_ajustados <- format(casos_covid_municipio$casos_acum_ajustados, digits=2, nsmall=2) #acortar el numero de casos dividido por poblacion
casos_covid_municipio[4:64] <-NULL  #No necesito las columnas por cada fecha ya, las tengo como filas
casos_covid_municipio
casos_covid_municipio$casos_acum_ajustados <- as.numeric(casos_covid_municipio$casos_acum_ajustados)
casos_covid_municipio
#via sf
#using INEGI shapefile
municipios_sf <- st_read(dsn = "C:/Users/Mariano/Documents/ArcGIS/MEX/Marco geoestadistico/municipios.shp") %>%
st_transform(4326)
View(municipios_sf)
#Join data to map
mexico <- municipios_sf %>%
mutate(id = cve_num) %>%
full_join(casos_covid_municipio, by = "id")
View(mexico)
mexico_14-04-2020 <- mexico %>%
filter(fecha == "14-04-2020")
mexico_14042020 <- mexico %>%
filter(fecha == "14-04-2020")
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "red", size = .3) #+
map_14042020
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "red", size = .3) +
aes(fill = casos_acum_ajustados) +
scale_fill_manual(values = c("#cbc9e2", "#9e9ac8", "#756bb1", "#54278f"),
labels = c(10,20,30,100)) #+
map_14042020
?scale_fill_continuous
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "red", size = .3) +
aes(fill = casos_acum_ajustados) +
scale_fill_continuous()
map_14042020
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "red", size = .3) +
aes(fill = casos_acum_ajustados) +
scale_fill_continuous()
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados) +
scale_fill_continuous(colorRamp("red"))
map_14042020
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados, colorRamp("red")) +
scale_fill_continuous()
map_14042020
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados, palette("red")) +
scale_fill_continuous()
map_14042020
?palette
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados, palette(red(seq(0,.9,len = 25)))) +
scale_fill_continuous()
map_14042020
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados, palette(grey(seq(0,.9,len = 25)))) +
scale_fill_continuous()
map_14042020
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados) +
scale_fill_continuous(red)
map_14042020
?palette
?scale_fill_gradient()
#It works! Let's build the map now!
map_14042020 <- ggplot() +
geom_sf(data = mexico_14042020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend")
map_14042020
mexico_14052020 <- mexico %>%
filter(fecha == "14-05-2020")
#Map
ggplot(data = municipios_sf) +
geom_sf()
#It works! Let's build the map now!
map_14052020 <- ggplot() +
geom_sf(data = mexico_14052020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend")
map_14052020
#14062020
mexico_14062020 <- mexico %>%
filter(fecha == "14-06-2020")
#Map
ggplot(data = municipios_sf) +
geom_sf()
#It works! Let's build the map now!
map_14062020 <- ggplot() +
geom_sf(data = mexico_14062020, color = "white", size = .2) +
aes(fill = casos_acum_ajustados) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend")
map_14062020
#Now iteratively
p <- mexico %>%
# 10 random dates
filter(fecha %in% sample(unique(fecha), 10)) %>%
arrange(fecha) +
ggplot() +
geom_sf(data = mexico, color = "white", size = .2) +
aes(fill = casos_acum_ajustados) +
scale_fill_gradient(low = "white", high = "red", na.value = "gray", guide = "legend") +
transition_time(fecha)
####################################################################################
####################################################################################
##########################    3.ANIMATE       ######################################
####################################################################################
####################################################################################
####################################################################################
?animate
library(gganimate)
library(gifski)
install.packages(gifski)
install.packages("gganimate")
install.packages("gifski")
library(gganimate)
library(gifski)
####################################################################################
####################################################################################
##########################    3.ANIMATE       ######################################
####################################################################################
####################################################################################
####################################################################################
?animate
